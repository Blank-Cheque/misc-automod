# This will remove all mentions of subreddits other than a certain set of subreddits
type: any
title+body (regex): '((https?\:\/\/)?(np\.|www\.|old\.|new\.)?reddit\.com)?\/?r\/(?!(SUBREDDIT 1|SUBREDDIT 2|SUBREDDIT 3)(?!\w))\S+\b'
action: remove
action_reason: 'Disallowed sub mention'

---

# This will put a stickied comment on all posts
type: submission
comment_stickied: true
comment: |
  Your comment here
  
  This uses the same syntax as a reddit post

---

# This will force you to manually approve all posts
type: submission
action: filter
action_reason: 'Manual approval is activated; please check this post for rule violations'

---

# This will remove all posts by a certain user, commonly referred to as an automod ban or a shadowban (though this is not technically a shadowban)
type: any
author: ["USER 1", "USER 2", "USER 3", "ETC"]
action: remove
action_reason: '{{author}} is automod-banned'

---

# This will filter all posts which get 4 or more reports, except modposts
type: any
author: 
  is_moderator: false
reports: 4
action: filter
action_reason: 'Auto-filtered due to high amount of reports'

---

# This will report all posts which mention the mods
type: any
author:
     is_moderator: false
title+body (regex): 'mod(erator)?s?'
action: report
action_reason: 'May mention mods'

---

# This will filter all instances of a certain word, phrase, or regex, UNLESS contained within quotes
# This is partially broken and idk how to fix it
# If you're curious it doesn't detect the string if either side of it has a quote
# Honestly just don't use this one it's a shitshow
# If you replace the regex with '(?<!["''])INSERTWORDHERE(?!(["'']))' it'll detect it only if there are quotes immediately on either side, that one works
title+body (regex): '(?<!["''])INSERTWORDHERE(?!(.*["'']))'
action: filter
action_reason: 'Contains disallowed word "{{match}}"'

---

# Removes comments which contain image or video links
type: comment
title+body (regex): 
    - '\b(?:https?\:\/\/)?((?:\S+\.)?(?:\S+)(?:\.(?:com?|net|gov|us|uk|info|eu|it|io|tv|moe|ws)))(\/(?:[\S]+)(\.(?:png|jpe?g|gifv?|mp4)))\b'
    - '\b(?:https?\:\/\/)?((?:www\.)?google\.com)(\/search\?\S+)(imgrc\=\S+)\b'
    - '\b(?:https?\:\/\/)?((?:www\.)?gfycat.com)(\/\S+)\b'
    - '\b(?:https?\:\/\/)?((?:www\.)?youtu\.?be(?:\.com)?)(\/watch\S+)\b'
action: remove
action_reason: "Comment contains image or video link: '{{match}}'"

---

# Removes comments which contain image links (videos allowed)
type: comment
title+body (regex): 
    - '\b(?:https?\:\/\/)?((?:\S+\.)?(?:\S+)(?:\.(?:com?|net|gov|us|uk|info|eu|it|io|tv|moe|ws)))(\/(?:[\S]+)(\.(?:png|jpe?g)))\b'
    - '\b(?:https?\:\/\/)?((?:www\.)?google\.com)(\/search\?\S+)(imgrc\=\S+)\b'
    - '\b(?:https?\:\/\/)?((?:www\.)?imgur\.com)((\/a)\/?\w{4,})(\.(?:png|jpe?g))\b'
action: remove
action_reason: "Comment contains image link: '{{match}}'"

---

# Removes comments which contain video links (images allowed)
type: comment
title+body (regex): 
    - '\b(?:https?\:\/\/)?((?:\S+\.)?(?:\S+)(?:\.(?:com?|net|gov|us|uk|info|eu|it|io|tv|moe|ws)))(\/(?:[\S]+)(\.(?:gifv?|mp4)))\b'
    - '\b(?:https?\:\/\/)?((?:www\.)?gfycat.com)(\/\S+)\b'
    - '\b(?:https?\:\/\/)?((?:www\.)?youtu\.?be(?:\.com)?)(\/watch\S+)\b'
action: remove
action_reason: "Comment contains video link: '{{match}}'"
